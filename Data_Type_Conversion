#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
//#include <iomanip>
using namespace std;

//C++规定，当不同类型的数据进行运算符操作时，需先将数据转换成同一类型，然后才可以进行运算。
//数据类型转换，可以通过两种形式完成：
//1，隐式类型转换
//2，显示类型转换
// 
//1，隐式类型转换
//C++规定数据类型级别从高到低的顺序是：
	//类型转换级别：【高->低】
	//	doulbe->float->long int->int->short
//当两个操作数类型不一致时，运算之前将级别低的自动转换成级别高的，然后再进行运算
//char a = 4;
//short b = 6;
//int c = 0;
//c = a + b;	//先把a转成short跟b做加法，然后把结果转成int赋值给c
//
//2，显示类型转换
//现实转换有两种方法：
//(1)强制转换法
//		(类型名)表达式		(float)(5%2)
//(2)函数法
//		类型名(表达式)		float(a+b)

class Complex {
	double real;
	double image;
public:
	Complex(void);
	Complex(int r);
	Complex(double r, double i);
	//友元函数(可以出现在类的任何地方)包括在private和public部分；
	friend Complex operator+(const Complex& c1, const Complex& c2);	//友元的麻烦比好处(尽量避免使用友元)
	operator float() const;	//成员函数，构造、析构、非成员函数不允许使用类型限定符(const)
	operator int() const;	//只有成员函数才使用"::"作用域符号；
	void print() const;
	~Complex();
};

Complex::Complex(void)
{
	real = 0;
	image = 0;
}

Complex::Complex(int r)
{
	real = r;
	image = 0;
}

Complex::Complex(double r, double i)
{
	real = r;
	image = i;
}

Complex operator+(const Complex &c1,const Complex &c2)
{
	Complex temp;
	temp.real = c1.real + c2.real;
	temp.image = c1.image + c2.image;
	return temp;
}

void Complex::print() const
{
	cout << real << '+' << image << 'i' << endl;
}

Complex::operator float() const
{
	return float(real);	//真正的类型转换在这里
}

Complex::operator int() const
{
	return int(real);
}

Complex::~Complex()
{
}

int main()
{
	Complex com1(2.2, 2.2);
	cout << "com1 = ";	
	com1.print();

	cout << "20+com1 = ";
	com1 = Complex(20) + com1;//20会自动调用Complex(int r)将整数20转换成Complex类型，然后再调用重载加号，赋值
	com1.print();

	cout << float(com1) * 0.5 << endl;
	Complex com2(3.3, 3.3);
	cout << "com2 = ";
	com2.print();
	cout << int(com2) * 10 << endl;

	//class 源类类名
	//{
	//	//...
	//	operator 目的类型()
	//	{
	//		//...
	//		return 目的类型的数据;
	//	}
	//	//...
	//};

	//其中，源类类名为要转换的源类类型；目的类型为要转换成为的类型，它既可以是用户自定义的类型，也可以是系统的预定义类型。
	//	在使用类类型转换函数时，需要注意以下几个问题：
	//	1)类类型转换函数只能定义为一个类的成员函数，而不能定义成类的友元函数。
	//	2)类类型转换函数既没有参数，也不显式给出返回类型。
	//	3)类类型函数中必须有“return 目的类型的数据；”的语句，既必须返回目的类型数据作为函数的返回值。
}

